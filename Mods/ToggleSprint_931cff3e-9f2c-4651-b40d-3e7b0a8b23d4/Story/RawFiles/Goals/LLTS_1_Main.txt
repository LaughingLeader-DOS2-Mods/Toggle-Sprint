Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLTS_InitToggleSprintSettings();
DB_ToggleSprint_Settings_SpeedSet(1);

//DB_ToggleSprint_SprintActive((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000, 0);
//DB_ToggleSprint_AutoSprint((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000, 0);
/*
DB_ToggleSprint_AutoMessage(0, "Auto-Sprint Disabled");
DB_ToggleSprint_AutoMessage(1, "Auto-Sprint Enabled");

DB_ToggleSprint_AutoSounds(0, "Items_Objects_Quest_Wall_Magic_A_Stop");
DB_ToggleSprint_AutoSounds(1, "Items_Objects_Quest_Wall_Magic_A_Start");
*/
//DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
//DB_ToggleSprint_Settings_SpeedSet(_Index)
KBSECTION
//REGION HELPERS
QRY
LLTS_QRY_Debug_PrintHere((STRING)_Message)
AND
DB_IsPlayer(_Player)
THEN
CharacterStatusText(_Player, _Message);


PROC
LLTS_AddSprintSkill((CHARACTERGUID)_Player)
AND
CharacterHasSkill(_Player, "Shout_Player_ToggleSprint", 0)
THEN
CharacterAddSkill(_Player, "Shout_Player_ToggleSprint");
LLTS_Settings_SetSpeedIfNotSet(_Player);

PROC
LLTS_Clear_SprintActive((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_SprintActive(_Player, _Val)
THEN
NOT DB_ToggleSprint_SprintActive(_Player, _Val);

PROC
LLTS_Clear_AutoSprint((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_AutoSprint(_Player, _Val)
THEN
NOT DB_ToggleSprint_AutoSprint(_Player, _Val);

QRY
LLTS_QRY_IsSprinting((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
AND
HasActiveStatus(_Player, _Status, 1)
THEN
DB_NOOP(1);

QRY
LLTS_QRY_ShouldBeSprinting((CHARACTERGUID)_Player, (STRING)_CheckStatus)
AND
HasActiveStatus(_Player, _CheckStatus, 0)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
THEN
DB_NOOP(1);

PROC
LLTS_Check_SprintActive((CHARACTERGUID)_Player)
AND
LLTS_QRY_IsSprinting(_Player)
AND
NOT DB_ToggleSprint_SprintActive(_Player, 0)
AND
NOT DB_ToggleSprint_SprintActive(_Player, 1)
THEN
DB_ToggleSprint_SprintActive(_Player, 1);
PartySetFlag(_Player, "TOGGLESPRINT_DEFAULTSPEED");

PROC
LLTS_ApplySpeed((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_Settings_SpeedSet(_Index)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
THEN
ApplyStatus(_Player, _Status, -1.0, 1);

PROC
LLTS_ApplySpeed((CHARACTERGUID)_Player)
AND
NOT DB_ToggleSprint_Settings_SpeedSet(_)
THEN
ApplyStatus(_Player, "PLAYER_TOGGLESPRINT", -1.0, 1);
PartySetFlag(_Player, "TOGGLESPRINT_DEFAULTSPEED");
DB_ToggleSprint_Settings_SpeedSet(0);

PROC
LLTS_ClearSpeedStatus((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
AND
HasActiveStatus(_Player, _Status, 1)
THEN
RemoveStatus(_Player, _Status);

PROC
LLTS_Debug_ClearSpeedStatus((CHARACTERGUID)_Player)
THEN
RemoveStatus(_Player, "PLAYER_TOGGLESPRINT");

PROC
LLTS_Debug_ClearSpeedStatus((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
THEN
RemoveStatus(_Player, _Status);

PROC
LLTS_UpdateSpeedStatus()
AND
DB_ToggleSprint_Settings_SpeedSet(_Index)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
AND
DB_IsPlayer(_Player)
AND
CharacterIsInCombat(_Player, 0)
AND
LLTS_QRY_ShouldBeSprinting(_Player, _Status)
THEN
//LLTS_ClearSpeedStatus(_Player);
ApplyStatus(_Player, _Status, -1.0);

PROC
LLTS_UpdateSpeed((INTEGER)_Index)
THEN
SysClear("DB_ToggleSprint_Settings_SpeedSet", 1);
DB_ToggleSprint_Settings_SpeedSet(_Index);
//LLTS_UpdateSpeedStatus();

PROC
LLTS_AddBookIfMissing((CHARACTERGUID)_Player)
AND
ItemTemplateIsInCharacterInventory(_Player, "BOOK_ToggleSprint_Settings_4094ea08-749e-48d8-af6b-17af4a962fef", 0)
THEN
ItemTemplateAddTo("BOOK_ToggleSprint_Settings_4094ea08-749e-48d8-af6b-17af4a962fef", _Player, 1, 0);

//END_REGION

//REGION SPRINT_TOGGLE
IF
CharacterUsedSkill((CHARACTERGUID)_Player, "Shout_Player_ToggleSprint", _)
AND
NOT LLTS_QRY_IsSprinting(_Player)
AND
CharacterIsInCombat(_Player, 1)
THEN
CharacterStatusText(_Player, "Sprinting is disabled in combat.");


IF
CharacterUsedSkill((CHARACTERGUID)_Player, "Shout_Player_ToggleSprint", _)
AND
NOT LLTS_QRY_IsSprinting(_Player)
AND
CharacterIsInCombat(_Player, 0)
THEN
LLTS_ApplySpeed(_Player);

IF
CharacterUsedSkill((CHARACTERGUID)_Player, "Shout_Player_ToggleSprint", _)
AND
LLTS_QRY_IsSprinting(_Player)
THEN
LLTS_Clear_SprintActive(_Player);
LLTS_ClearSpeedStatus(_Player);
CharacterStatusText(_Player, "Sprint Disabled");

IF
CharacterUsedSkill((CHARACTERGUID)_Player, "Shout_Player_ToggleSprint", _)
AND
LLTS_QRY_IsSprinting(_Player)
THEN
LLTS_ClearSpeedStatus(_Player);

IF
CharacterStatusApplied(_Player, _Status, _)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
AND
NOT DB_ToggleSprint_SprintActive(_Player, 1)
THEN
LLTS_Clear_SprintActive(_Player);
DB_ToggleSprint_SprintActive(_Player, 1);
//CharacterStatusText(_Player, "Sprint Enabled");

//END_REGION

//REGION AUTO_TOGGLE_SPRINT
//Mirror
IF
CharacterUsedItem(_Player,ITEMGUID_S_LV_Mirror_9a0a95b9-1bd0-4a33-b7e6-bd9be41ce3f3)
AND
LLTS_QRY_IsSprinting(_Player)
THEN
LLTS_ClearSpeedStatus(_Player);

IF
CharacterCreationFinished(_Player)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
AND
ObjectGetFlag(_Player, "TOGGLESPRINT_AUTOSPRINT_DISABLED", 0)
AND
CharacterIsInCombat(_Player, 0)
THEN
LLTS_ApplySpeed(_Player);
//CharacterStatusText(_Player, "Sprint auto-enabled");

IF
CharacterStatusApplied(_Player, _Status, _)
AND
DB_ToggleSprint_Settings_Speed(_Index, _Status, _Flag, _DialogVar)
AND
CharacterIsInCombat(_Player, 1)
THEN
LLTS_ClearSpeedStatus(_Player);
CharacterStatusText(_Player, "Sprinting is disabled in combat.");

IF
ObjectEnteredCombat((CHARACTERGUID)_Player, _)
AND
LLTS_QRY_IsSprinting(_Player)
THEN
LLTS_ClearSpeedStatus(_Player);

IF
ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
AND
ObjectGetFlag(_Player, "TOGGLESPRINT_AUTOSPRINT_DISABLED", 0)
THEN
LLTS_ApplySpeed(_Player);
//CharacterStatusText(_Player, "Sprint auto-enabled");

//END_REGION

//REGION RESET
/*
IF
CharacterItemEvent(_Player, _Item, "EVENT_TOGGLESPRINT_FULLRESET")
AND
_Player != NULL_00000000-0000-0000-0000-000000000000
AND
DB_ToggleSprint_SprintActive(_Player, _Var)
THEN
NOT DB_ToggleSprint_SprintActive(_Player, _Var);
LLTS_ClearSpeedStatus(_Player);
CharacterStatusText(_Player, "Sprint Reset");

IF
CharacterItemEvent(_Player, _Item, "EVENT_TOGGLESPRINT_FULLRESET")
AND
_Player != NULL_00000000-0000-0000-0000-000000000000
AND
DB_ToggleSprint_AutoSprint(_Player, _Var)
THEN
NOT DB_ToggleSprint_AutoSprint(_Player, _Var);
CharacterStatusText(_Player, "Auto-Sprint Reset");
*/

//END_REGION

//REGION HOST
PROC
LLTS_MarkHost()
AND
CharacterGetHostCharacter(_Host)
AND
UserGetFlag(_Host, "TOGGLESPRINT_ISHOST", 0)
THEN
UserSetFlag(_Host, "TOGGLESPRINT_ISHOST", 0);

PROC
LLTS_MarkHost()
AND
CharacterGetHostCharacter(_Host)
AND
DB_IsPlayer(_Player)
AND
_Player != _Host
AND
CharacterGetReservedUserID(_Host, _ID)
AND
NOT CharacterGetReservedUserID(_Player, _ID)
AND
UserGetFlag(_Player, "TOGGLESPRINT_ISHOST", 1)
THEN
UserClearFlag(_Player, "TOGGLESPRINT_ISHOST", 0);
//END_REGION

//REGION LEGACY
PROC
LLTS_Check_AutoSprint((CHARACTERGUID)_Player)
AND
DB_ToggleSprint_AutoSprint(_Player, 0)
THEN
ObjectSetFlag(_Player, "TOGGLESPRINT_AUTOSPRINT_DISABLED");
//END_REGION

//REGION UPDATER
/*
PROC
LLTS_RefreshDatabases()
AND
DB_IsPlayer(_Player)
AND
GetItemForItemTemplateInInventory(_Player, "Quest_AutoSprint_be19d1b1-66aa-4660-b809-10b4b72446c3", _Item)
THEN
ItemDestroy(_Item);

PROC
LLTS_RefreshDatabases()
AND
DB_IsPlayer(_Player)
THEN
LLTS_Debug_ClearSpeedStatus(_Player);
*/
PROC
LLTS_InitToggleSprintSettings()
THEN
SysClear("DB_ToggleSprint_Settings_Speed", 4);
DB_ToggleSprint_Settings_Speed(0, "PLAYER_TOGGLESPRINT1", "TOGGLESPRINT_DEFAULTSPEED", "ToggleSprint_SpeedActive1_4cf73af9-8a39-416e-a9a0-604ed5947404");
DB_ToggleSprint_Settings_Speed(1, "PLAYER_TOGGLESPRINT2", "TOGGLESPRINT_SPEED2", "ToggleSprint_SpeedActive2_79e8fe33-441e-43e4-b3cc-3c3def31150e");
DB_ToggleSprint_Settings_Speed(2, "PLAYER_TOGGLESPRINT3", "TOGGLESPRINT_SPEED3", "ToggleSprint_SpeedActive3_86ced1f8-96c4-4c59-a194-9cbae0ad7ad3");
DB_ToggleSprint_Settings_Speed(3, "PLAYER_TOGGLESPRINT4", "TOGGLESPRINT_SPEED4", "ToggleSprint_SpeedActive4_01065c1d-5e39-4f22-9789-0314ec992e42");

PROC
LLTS_System_RefreshDatabases()
THEN
LLTS_InitToggleSprintSettings();

//LeaderLib support
PROC
LLTS_System_RegisterDatabases()
THEN
DB_LeaderLib_ModApi_RegisterDatabase("ToggleSprint", "LaughingLeader", "Main", "DB_ToggleSprint_SprintActive", 2);
DB_LeaderLib_ModApi_RegisterDatabase("ToggleSprint", "LaughingLeader", "Main", "DB_ToggleSprint_AutoSprint", 2);
DB_LeaderLib_ModApi_RegisterDatabase("ToggleSprint", "LaughingLeader", "Main", "DB_ToggleSprint_AutoMessage", 2);
DB_LeaderLib_ModApi_RegisterDatabase("ToggleSprint", "LaughingLeader", "Main", "DB_ToggleSprint_AutoSounds", 2);
DB_LeaderLib_ModApi_RegisterDatabase("ToggleSprint", "LaughingLeader", "Main", "DB_ToggleSprint_Settings_Speed", 4);
DB_LeaderLib_ModApi_RegisterDatabase("ToggleSprint", "LaughingLeader", "Main", "DB_ToggleSprint_Settings_SpeedSet", 1);
DebugBreak("[LLTS:Main] Databases registered.");
//END_REGION

//REGION DEBUG
/*
IF
ObjectEnteredCombat((CHARACTERGUID)_Player, _)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
THEN
CharacterStatusText(_Player, "Sprint enabled before combat");

IF
ObjectEnteredCombat((CHARACTERGUID)_Player, _)
AND
DB_ToggleSprint_AutoSprint(_Player, 1)
THEN
CharacterStatusText(_Player, "Auto-Sprint enabled before combat");

IF
ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
THEN
CharacterStatusText(_Player, "Sprint was on");

IF
ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
AND
DB_ToggleSprint_AutoSprint(_Player, 1)
THEN
CharacterStatusText(_Player, "Sprint auto-enabled");

IF
CombatEnded(_ID)
AND
DB_IsPlayer(_Player)
AND
DB_WasInCombat(_Player,_ID)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
AND
DB_ToggleSprint_AutoSprint(_Player, 1)
THEN
CharacterStatusText(_Player, "ComatEnded | Sprint auto-enabled");

IF
CombatEnded(_ID)
AND
DB_IsPlayer(_Player)
AND
DB_WasInCombat(_Player,_ID)
THEN
DisplayText(_Player, "Combat has ended");

IF
ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_IsPlayer(_Player)
THEN
CharacterStatusText(_Player, "I left combat");

IF
ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_ToggleSprint_SprintActive(_Player, 1)
AND
DB_ToggleSprint_AutoSprint(_Player, 1)
THEN
CharacterStatusText(_Player, "Sprint auto-enabled");
*/

//END_REGION

//REGION GAME_STARTED
//For populating the IsPlayer DB in the editor
IF
GameStarted(_,1)
THEN
//Delay by a frame so CharacterGetHostCharacter returns something.
TimerLaunch("LaughingLeader_ToggleSprint_Timers_DebugSetup", 1);

IF
TimerFinished("LaughingLeader_ToggleSprint_Timers_DebugSetup")
AND
NOT DB_IsPlayer(_)
AND
CharacterGetHostCharacter(_Host)
THEN
DebugBreak("[LLTS] Added host character to DB_IsPlayer.");
DB_IsPlayer(_Host);

IF
GameStarted(_,_)
THEN
TimerLaunch("LaughingLeader_ToggleSprint_Timers_Setup", 2);

IF
TimerFinished("LaughingLeader_ToggleSprint_Timers_Setup")
THEN
LLTS_MarkHost();

IF
TimerFinished("LaughingLeader_ToggleSprint_Timers_Setup")
AND
DB_IsPlayer(_Player)
THEN
LLTS_AddSprintSkill(_Player);
// Check for database values in existing saves.
LLTS_Check_AutoSprint(_Player);
LLTS_Check_SprintActive(_Player); 
LLTS_Settings_SetSpeedIfNotSet(_Player);
//LLTS_AddBookIfMissing(_Player);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_ToggleSprint"
